-- 1.
zip' :: [a] -> [b] -> [(a, b)]
zip' xs ys = [(x, y) | x <- xs, y <- ys]

-----------------------------------------------------------------------------
-- 2.
zipWith' :: (a -> b -> c) -> [a] -> [b] -> [c]
zipWith' f xs ys = [f x y | x <- xs, y <- ys]

-----------------------------------------------------------------------------
-- 3.
zip'' :: [a] -> [b] -> [(a, b)]
zip'' xs ys = zipWith' (,) xs ys
